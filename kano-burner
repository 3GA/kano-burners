#!/usr/bin/env python

# kano-burner
#
# Copyright (C) 2014 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License v2
#
# [File description]


import sys
import time
import platform

from PyQt4 import QtGui, QtCore
from src.common.ui import UI
from src.common.download import download_kano_os
from src.common.utils import delete_dir, make_dir, debugger
from src.common.errors import NO_DISKS_ERROR


TEMP_DIR = ''  # set when detecting the platform and updated when a folder is created


# Step 1: Detect platform to import appropriate modules
if platform.system() == 'Darwin':
    debugger('Mac OS detected')
    from src.osx.burn import start_burn_process
    from src.osx.disk import get_disks_list, prepare_disk, eject_disk
    from src.osx.dependency import check_dependencies, request_admin_privileges
    TEMP_DIR = '/tmp/kano-burner/'

elif platform.system() == 'Linux':
    debugger('Linux OS detected')
    from src.linux.burn import start_burn_process
    from src.linux.disk import get_disks_list, prepare_disk, eject_disk
    from src.linux.dependency import check_dependencies, request_admin_privileges
    TEMP_DIR = '/tmp/kano-burner/'

elif platform.system() == 'Windows':
    debugger('Windows OS detected')
    from src.windows.burn import start_burn_process
    from src.windows.disk import get_disks_list, prepare_disk, eject_disk
    from src.windows.dependency import check_dependencies, request_admin_privileges
    TEMP_DIR = 'C:\\temp\\kano-burner\\'


class BurnerGUI(UI):

    def __init__(self):
        super(BurnerGUI, self).__init__()

    def onStart(self):
        # Step 1: make temp directory
        debugger('Making temp directory')
        make_dir(TEMP_DIR)

        # TODO: Step 2: check root
        # debugger('Making sure program was ran with sudo')
        # enforce_root("You need to run this program as root.")

        # Step 3: check if dependencies are met
        debugger('Checking for dependencies..')
        error = check_dependencies(TEMP_DIR)
        if error:
            self.showError(error)

    def onComboBoxClick(self):
        self.disksComboBox.clear()
        self.startButton.setEnabled(True)

        # Step 6: list drives
        debugger('Scanning drives..')
        self.disks = get_disks_list()
        if not self.disks:
            self.showError(NO_DISKS_ERROR)

        # add the disks to the dropdown menu
        for disk in self.disks:
            self.disksComboBox.addItem('{}, {}'.format(disk['name'], disk['size']))

    def onStartClick(self):
        # check if the user has selected a disk, otherwise show an error
        selected_disk = self.disks[self.disksComboBox.currentIndex()]['id']

        # switch screen to progressScreen and grab the disk id e.g. /dev/disk1
        self.showScreen(self.progressScreen)

        # Step 7: prepare backend
        # thread to download and burn the image
        backendThread = BurnerBackendThread(selected_disk)

        # connecting Qt singals to methods on the UI
        # so that the backend can report its progress
        backendThread.notifyProgress.connect(self.setProgress)
        backendThread.notifyStage.connect(self.setStatusTitle)
        backendThread.notifyDescription.connect(self.setStatusDescription)
        backendThread.notifyFinish.connect(self.onBackendFinish)

        # start the thread and wait for it to finish
        backendThread.start()
        time.sleep(1)  # very odd fix

    def onBackendFinish(self, error):
        if error:
            self.showError(error)
        else:
            self.showScreen(self.finishScreen)

    def onRetryClick(self):
        self.disksComboBox.restore()
        self.progressBar.reset()
        self.startButton.setEnabled(False)
        self.showScreen(self.introScreen)
        self.onStart()

    def onFinishClick(self):
        self.close()

    def onFinish(self):
        # Step 15: remove temp files
        debugger('Removing temp files')
        delete_dir(TEMP_DIR)


class BurnerBackendThread(QtCore.QThread):

    # signals must be defined here and not in init
    # they are used by the backend to communicate with the UI and update things
    notifyProgress = QtCore.pyqtSignal(int)
    notifyStage = QtCore.pyqtSignal(str)
    notifyDescription = QtCore.pyqtSignal(str)
    notifyFinish = QtCore.pyqtSignal(dict)

    def __init__(self, disk, parent=None):
        super(BurnerBackendThread, self).__init__(parent)
        self.selected_disk = disk

    def showStage(self, text):
        self.notifyStage.emit(text)

    def showDescription(self, text):
        self.notifyDescription.emit(text)

    def showProgress(self, progress, text):
        self.notifyProgress.emit(progress)
        self.notifyDescription.emit(text)

    def showFinish(self, error):
        self.notifyFinish.emit(error)

    def run(self):
        global TEMP_DIR

        # Step 8: download the latest Kano OS image
        debugger('Downloading Kano OS..')
        self.showStage('Downloading Kano OS..')
        os_info, error = download_kano_os(TEMP_DIR, self.showProgress)
        if error:
            self.showFinish(error)
            debugger('Removing temp files')
            delete_dir(TEMP_DIR)
            return

        # Step 9: preparing the disk (unmounting, formatting, etc)
        debugger('Preparing {} for burning..'.format(self.selected_disk))
        self.showStage('Preparing disk for burning..')
        prepare_disk(self.selected_disk, self.showDescription)

        # Step 10: burn image
        debugger('Burning image to SD card on ' + self.selected_disk)
        self.showStage('Burning Kano OS..')
        error = start_burn_process(TEMP_DIR, os_info, self.selected_disk, self.showProgress)
        if error:
            self.showFinish(error)
            return

        # Step 11: eject disk
        debugger('Ejecting disk..')
        self.showStage('Waiting for things to settle..')
        time.sleep(5)  # wait for dd to mount the disk back
        eject_disk(self.selected_disk)

        # Step 12: success messsage and notify UI of finish with no error
        self.showStage("Kano OS has successfully been burned. Let's go!")
        self.notifyFinish.emit(dict())


def main():
    app = QtGui.QApplication(sys.argv)
    burnerUI = BurnerGUI()
    sys.exit(app.exec_())


if __name__ == '__main__':
    request_admin_privileges()
    main()
